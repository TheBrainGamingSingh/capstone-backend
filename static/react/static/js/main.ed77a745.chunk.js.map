{"version":3,"sources":["components/Navbar.js","components/ComplaintForm.js","App.js","serviceWorker.js","index.js"],"names":["Navbar","className","href","class","id","ComplaintForm","state","predictions","showState","categories","handleFormSubmit","e","preventDefault","request","query","document","getElementById","value","console","log","fetch","method","body","JSON","stringify","then","res","json","setState","labels","displayOutput","this","map","category","label","confidence","Math","round","Number","EPSILON","onSubmit","type","required","for","name","Component","App","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","navigator","serviceWorker","ready","registration","unregister","catch","error","message"],"mappings":"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","file":"static/js/main.ed77a745.chunk.js","sourcesContent":["import React from \"react\";\r\n\r\nconst Navbar = () =>\r\n{\r\n    return(\r\n        <nav className = \"custom-bluegreen-bg-1\">\r\n            <div className=\"nav-wrapper container\">\r\n                <a href=\"#\" class=\"brand-logo\">Complaint Classifier</a>\r\n                <ul id=\"nav-mobile\" class=\"right hide-on-med-and-down\">\r\n                    <li><a href=\"#\">Option 1</a></li>\r\n                    <li><a href=\"#\">Option 2</a></li>\r\n                    <li><a href=\"#\">Option 3</a></li>\r\n                </ul>\r\n            </div>\r\n        </nav>\r\n    );\r\n}\r\n\r\nexport default Navbar;","import React, { Component } from \"react\";\r\n\r\nclass ComplaintForm extends Component\r\n{\r\n    state = {\r\n        predictions: [],\r\n        showState: false,\r\n        categories: [\r\n            [\"Encroachment\", \"follow_the_signs\"],\r\n            [\"Water Supply\", \"water_damage\"],\r\n            [\"Electrical\", \"electrical_services\"],\r\n            [\"Stray Animals\", \"pets\"],\r\n            [\"Roads\", \"add_road\"],\r\n            [\"Gardens\" , \"local_florist\"],\r\n            [\"Traffic\", \"traffic\"],\r\n            [\"Property Tax\", \"monetization_on\"],\r\n            [\"Health\", \"local_hospital\"],\r\n            [\"Building Permission\", \"location_city\"],\r\n            [\"Drainage\", \"waves\"],\r\n            [\"Garbage\", \"delete\"]\r\n        ]\r\n    };\r\n\r\n    handleFormSubmit = (e) =>\r\n    {\r\n        e.preventDefault();\r\n\r\n        var request = {\r\n            query: document.getElementById(\"complaint\").value\r\n        };\r\n\r\n        console.log(request);\r\n\r\n        fetch(\"/predict\",\r\n            {\r\n                method: \"POST\",\r\n                body: JSON.stringify(request)\r\n            }\r\n        )\r\n        .then(res => res.json())\r\n        .then(\r\n            res =>\r\n            {\r\n                this.setState(\r\n                    {\r\n                        predictions: res.labels,\r\n                        showState: true\r\n                    }\r\n                );\r\n                console.log(res);\r\n            }\r\n        );\r\n    }\r\n\r\n    render()\r\n    {\r\n        var allIcons = this.state.categories.map(\r\n            category =>\r\n            {\r\n                return (<span><i className=\"medium material-icons\">{category[1]}</i> {category[0]}<br /></span>);\r\n            }\r\n        );\r\n\r\n        var displayOutput;\r\n\r\n        if(this.state.showState)\r\n        {\r\n            displayOutput = this.state.predictions.map(\r\n                label =>\r\n                {\r\n                    var confidence = label.confidence*100;\r\n                    return(\r\n                        <div className=\"col s4\">\r\n                            <div className=\"card z-depth-3 darken-1\">\r\n                                <ul className=\"card-content collection with-header\">\r\n                                    <li className = \"collection-item center\"><i className = \"material-icons medium\">{this.state.categories[label.id][1]}</i></li>\r\n                                    <li className=\"card-title collection-header center\">{label.category}</li>\r\n                                    <li className = \"collection-item center\">Confidence: {Math.round((confidence + Number.EPSILON)*100)/100}%</li>\r\n                                </ul>\r\n                            </div>\r\n                        </div>\r\n                    );\r\n                }  \r\n            );\r\n        }\r\n        else\r\n        {\r\n            displayOutput = null;\r\n        }\r\n\r\n        return(\r\n            <div className = \"container center\">\r\n                <h3>Complaint Form</h3>\r\n                <form onSubmit = {this.handleFormSubmit}>\r\n                    <div className = \"row container\">\r\n                        <div className = \"input-field col s6\">\r\n                            <input id = \"first_name\" type = \"text\" className = \"validate\" required />\r\n                            <label for = \"first_name\">First Name</label>\r\n                        </div>\r\n                        <div className = \"input-field col s6\">\r\n                            <input id = \"last_name\" type = \"text\" className=\"validate\" required />\r\n                            <label for = \"last_name\">Last Name</label>\r\n                        </div>\r\n                    </div>\r\n                    <div className = \"row container\">\r\n                        <div className = \"input-field col s6\">\r\n                            <input id = \"email\" type = \"email\" className = \"validate\" required />\r\n                            <label for = \"email\">E-Mail</label>\r\n                        </div>\r\n                        <div className = \"input-field col s6\">\r\n                            <input id = \"address\" type = \"text\" className=\"validate\" required />\r\n                            <label for = \"address\">Address</label>\r\n                        </div>\r\n                    </div>\r\n                    <div class=\"row container\">\r\n                        <div class=\"input-field col s12\">\r\n                            <input id = \"complaint\" type = \"text\" className = \"validate\" required />\r\n                            <label for = \"complaint\">Enter complaint here</label>\r\n                        </div>\r\n                    </div>\r\n                    <button class=\"btn waves-effect waves-light\" type=\"submit\" name=\"action\">Submit Complaint</button>\r\n                </form>\r\n                <br />\r\n                <br />\r\n                <br />\r\n                \r\n                <div className=\"row\">\r\n                    {displayOutput}\r\n                </div>\r\n            </div>\r\n        );\r\n    }\r\n}\r\n\r\nexport default ComplaintForm;","import React from 'react';\r\nimport Navbar from \"./components/Navbar\";\r\nimport ComplaintForm from \"./components/ComplaintForm\";\r\n\r\nconst App = () =>\r\n{\r\n  return(\r\n    <div>\r\n      <Navbar />\r\n      <ComplaintForm />\r\n    </div>\r\n  );\r\n}\r\n\r\nexport default App;\r\n","// This optional code is used to register a service worker.\r\n// register() is not called by default.\r\n\r\n// This lets the app load faster on subsequent visits in production, and gives\r\n// it offline capabilities. However, it also means that developers (and users)\r\n// will only see deployed updates on subsequent visits to a page, after all the\r\n// existing tabs open on the page have been closed, since previously cached\r\n// resources are updated in the background.\r\n\r\n// To learn more about the benefits of this model and instructions on how to\r\n// opt-in, read https://bit.ly/CRA-PWA\r\n\r\nconst isLocalhost = Boolean(\r\n  window.location.hostname === 'localhost' ||\r\n    // [::1] is the IPv6 localhost address.\r\n    window.location.hostname === '[::1]' ||\r\n    // 127.0.0.0/8 are considered localhost for IPv4.\r\n    window.location.hostname.match(\r\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\r\n    )\r\n);\r\n\r\nexport function register(config) {\r\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\r\n    // The URL constructor is available in all browsers that support SW.\r\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\r\n    if (publicUrl.origin !== window.location.origin) {\r\n      // Our service worker won't work if PUBLIC_URL is on a different origin\r\n      // from what our page is served on. This might happen if a CDN is used to\r\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\r\n      return;\r\n    }\r\n\r\n    window.addEventListener('load', () => {\r\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\r\n\r\n      if (isLocalhost) {\r\n        // This is running on localhost. Let's check if a service worker still exists or not.\r\n        checkValidServiceWorker(swUrl, config);\r\n\r\n        // Add some additional logging to localhost, pointing developers to the\r\n        // service worker/PWA documentation.\r\n        navigator.serviceWorker.ready.then(() => {\r\n          console.log(\r\n            'This web app is being served cache-first by a service ' +\r\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\r\n          );\r\n        });\r\n      } else {\r\n        // Is not localhost. Just register service worker\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    });\r\n  }\r\n}\r\n\r\nfunction registerValidSW(swUrl, config) {\r\n  navigator.serviceWorker\r\n    .register(swUrl)\r\n    .then(registration => {\r\n      registration.onupdatefound = () => {\r\n        const installingWorker = registration.installing;\r\n        if (installingWorker == null) {\r\n          return;\r\n        }\r\n        installingWorker.onstatechange = () => {\r\n          if (installingWorker.state === 'installed') {\r\n            if (navigator.serviceWorker.controller) {\r\n              // At this point, the updated precached content has been fetched,\r\n              // but the previous service worker will still serve the older\r\n              // content until all client tabs are closed.\r\n              console.log(\r\n                'New content is available and will be used when all ' +\r\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\r\n              );\r\n\r\n              // Execute callback\r\n              if (config && config.onUpdate) {\r\n                config.onUpdate(registration);\r\n              }\r\n            } else {\r\n              // At this point, everything has been precached.\r\n              // It's the perfect time to display a\r\n              // \"Content is cached for offline use.\" message.\r\n              console.log('Content is cached for offline use.');\r\n\r\n              // Execute callback\r\n              if (config && config.onSuccess) {\r\n                config.onSuccess(registration);\r\n              }\r\n            }\r\n          }\r\n        };\r\n      };\r\n    })\r\n    .catch(error => {\r\n      console.error('Error during service worker registration:', error);\r\n    });\r\n}\r\n\r\nfunction checkValidServiceWorker(swUrl, config) {\r\n  // Check if the service worker can be found. If it can't reload the page.\r\n  fetch(swUrl, {\r\n    headers: { 'Service-Worker': 'script' },\r\n  })\r\n    .then(response => {\r\n      // Ensure service worker exists, and that we really are getting a JS file.\r\n      const contentType = response.headers.get('content-type');\r\n      if (\r\n        response.status === 404 ||\r\n        (contentType != null && contentType.indexOf('javascript') === -1)\r\n      ) {\r\n        // No service worker found. Probably a different app. Reload the page.\r\n        navigator.serviceWorker.ready.then(registration => {\r\n          registration.unregister().then(() => {\r\n            window.location.reload();\r\n          });\r\n        });\r\n      } else {\r\n        // Service worker found. Proceed as normal.\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    })\r\n    .catch(() => {\r\n      console.log(\r\n        'No internet connection found. App is running in offline mode.'\r\n      );\r\n    });\r\n}\r\n\r\nexport function unregister() {\r\n  if ('serviceWorker' in navigator) {\r\n    navigator.serviceWorker.ready\r\n      .then(registration => {\r\n        registration.unregister();\r\n      })\r\n      .catch(error => {\r\n        console.error(error.message);\r\n      });\r\n  }\r\n}\r\n","import React from 'react';\r\nimport ReactDOM from 'react-dom';\r\nimport './index.css';\r\nimport App from './App';\r\nimport * as serviceWorker from './serviceWorker';\r\n\r\nReactDOM.render(\r\n  <React.StrictMode>\r\n    <App />\r\n  </React.StrictMode>,\r\n  document.getElementById('root')\r\n);\r\n\r\n// If you want your app to work offline and load faster, you can change\r\n// unregister() to register() below. Note this comes with some pitfalls.\r\n// Learn more about service workers: https://bit.ly/CRA-PWA\r\nserviceWorker.unregister();\r\n"],"sourceRoot":""}